#!/usr/bin/perl -w

# Perl/Tk stuff originally from pilas motor controller software from 2010-03-13 to 2010-03-17 mza @ uh idlab
# 2011-10-31 mza adapted for use with fiber_readout

use strict;
use lib 'work';
use lib 'scripts';
use fiber_readout_swigwrapper;
use Tk;
#use Tk::PNG;
#use Tk::Photo;
use debug_info_warning_error;

my $window;
my ($attempt_to_open_card_button, $attempt_to_close_card_button);
my ($soft_trigger_button);

my $card_id = 5;

sub setup_pci {
	fiber_readout_swigwrapper::setup_pci($card_id);
	$attempt_to_open_card_button ->configure(-state=>'disable');
	$attempt_to_close_card_button->configure(-state=>'normal');
	$soft_trigger_button         ->configure(-state=>'normal');
}

sub close_pci {
	$attempt_to_open_card_button ->configure(-state=>'normal');
	$attempt_to_close_card_button->configure(-state=>'disable');
	$soft_trigger_button         ->configure(-state=>'disable');
}

sub soft_trigger {
	fiber_readout_swigwrapper::send_soft_trigger_request_command_packet();
}

#my $string = sprintf("\"%s\"\n", $fiber_readout::default_device_name);
#print $string;

sub setup_main_window {
	$window = new MainWindow(-title=>"iTOP electronics module / fiber readout", -height=>480, -width=>640);
	$window->bind('<Key-Escape>', \&quit);
#	my $default_color = "#d9d9d9";
	my $card_id_entry             = $window->Entry(-width=>5, -state=>"normal", -textvariable=>\$card_id);
	$attempt_to_open_card_button  = $window->Button(-text=>"open DSP_cPCI card #", -command=>\&setup_pci);
	$attempt_to_close_card_button = $window->Button(-text=>"close card", -command=>\&close_pci, -state=>'disable');
	$attempt_to_open_card_button ->grid(-row=>0, -column=>0);
	$card_id_entry               ->grid(-row=>0, -column=>1);
	$attempt_to_close_card_button->grid(-row=>0, -column=>2);
	$soft_trigger_button          = $window->Button(-text=>"soft trigger", -command=>\&soft_trigger, -state=>'disable');
	$soft_trigger_button         ->grid(-row=>1, -column=>0);

	# here are examples of doing things in Perl/Tk:
	#$filter_slide_frame  = $window->Frame(-borderwidth=>15, -background=>$filter_slide_frame_background_color);
	#$radiobutton_filter_label = $filter_slide_frame->Label(-text=>"filter slide:", -background=>$filter_slide_frame_background_color);
	#$radiobutton_filter_none  = $filter_slide_frame->Radiobutton(-text=>"none",  -value=>0, -variable=>\$displayed_filter_slide_macrostep_position, -command=>\&filter_slide_radiobutton_clicked, -background=>$filter_slide_frame_background_color);
	#$radiobutton_filter_label->grid(-row=>0, -column=>0);
	#$scale_delay_in_picoseconds->grid    (-row=>0, -column=>0, -columnspan=>3);
	#$entry_delay_in_picoseconds->bind('<Return>', \&predicate_new_desired_delay_in_picoseconds);
	#$entry_delay_in_picoseconds       = $delay_slide_frame_1->Entry(-width=>5, -state=>"normal", -textvariable=>\$displayed_delay_in_picoseconds, -background=>$delay_slide_frame_background_color);
	#my $frame_xy_slide_grid_get_out_of_way_button  = $frame_xy_slide_grid->Button(-text=>"save x position and get out of way of PMT",  -command=>\&save_position_and_move_x_slide_out_of_way, -background=>$frame_xy_slide_grid_background_color);
	#my $frame_xy_slide_grid_left_button  = $frame_xy_slide_grid->Button(-text=>"left",  -command=>[\&move_xy_slide, -1,  0], -background=>$frame_xy_slide_grid_background_color);
	#my $frame_xy_slide_grid_restore_position_button  = $frame_xy_slide_grid->Button(-text=>"restore x position",  -command=>\&restore_position_of_x_slide, -background=>$frame_xy_slide_grid_background_color);
	#my $frame_canvas = $frame_xy_slide_grid->Canvas(-width=>313, -height=>320);
	#my $image = $frame_canvas->Photo(-format=>"png", -file => "R5900.png", -width=>313, -height=>320);
	#$frame_canvas->create('image', 0, 0, '-anchor' => 'nw', '-image' => $image);
	#$frame_canvas->grid(-row=>0, -column=>0);
	#$frame_canvas->Tk::bind('<ButtonRelease-1>', \&grid_button_release);

}

sub quit {
	exit(0);
}

setup_main_window();
MainLoop;

