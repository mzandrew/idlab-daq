#!/usr/bin/perl -w

# Perl/Tk stuff originally from pilas motor controller software from 2010-03-13 to 2010-03-17 mza @ uh idlab
# 2011-10-31 mza adapted for use with fiber_readout

use strict;
use lib 'work';
use lib 'scripts';
use fiber_readout_swigwrapper;
use Tk;
#use Tk::PNG;
#use Tk::Photo;
use Time::HiRes qw(usleep);
#use debug_info_warning_error;

my $window;

my ($card_id, $card_id_entry, $attempt_to_open_card_button, $attempt_to_close_card_button) = (5, 0, 0);
my ($soft_trigger_once_button, $N, $N_entry, $soft_trigger_N_times_button) = (0, 100, 0, 0);
my ($event_number, $event_number_entry, $set_event_number_button) = (5, 0, 0);
my ($start_window, $end_window, $start_window_entry, $end_window_entry, $set_start_and_end_windows_button) = (0, 511, 0, 0, 0);
my ($global_reset_button) = (0);
my ($clear_scaler_counters_button) = (0);
my ($channel, $channels) = (0, 0);
my $verbosity = 0;

sub read_config_file {
	my $config_file = ".config";
	open(CONFIGFILE, $config_file) || return;
	while (my $line = <CONFIGFILE>) {
		chomp($line);
		$line =~ s/#.*//;
		next if ($line =~ /^$/);
#		print "$line\n";
		if ($line =~ m/card=([0-9]+)/) {
			print "using card #$1\n";
			$card_id = $1;
		}
		if ($line =~ m/channels="([0-9]+)"/) {
			print "using channels $1\n";
			$channels = $1;
		}
		if ($line =~ m/verbosity="([0-9])"/) {
			print "using verbosity $1\n";
			$verbosity = $1;
		}
	}
	$channel = $channels;
	$channel =~ s/([0-9])+/$1/;
	close(CONFIGFILE) || return;
}

read_config_file();

my @channel_enable;
for (my $i=0; $i<4; $i++) {
	$channel_enable[$i] = 0;
}
for (my $i=0; $i<4; $i++) {
	if ($channels =~ m/$i/) { $channel_enable[$i] = 1; }
}
$fiber_readout_swigwrapper::channel_bitmask = 0;
for (my $i=0; $i<4; $i++) {
	$fiber_readout_swigwrapper::channel_bitmask |= $channel_enable[$i] << $i;
	print $channel_enable[$i];
}

sub setup_pci {
	fiber_readout_swigwrapper::setup_pci($card_id);
	$attempt_to_open_card_button      ->configure(-state=>'disable');
	$card_id_entry                    ->configure(-state=>'disable');
	$attempt_to_close_card_button     ->configure(-state=>'normal');
	$soft_trigger_once_button         ->configure(-state=>'normal');
	$soft_trigger_N_times_button      ->configure(-state=>'normal');
	$set_event_number_button          ->configure(-state=>'normal');
	$set_start_and_end_windows_button ->configure(-state=>'normal');
	$global_reset_button              ->configure(-state=>'normal');
	$clear_scaler_counters_button     ->configure(-state=>'normal');
}

sub close_pci {
	fiber_readout_swigwrapper::close_pci($card_id);
	$attempt_to_open_card_button      ->configure(-state=>'normal');
	$card_id_entry                    ->configure(-state=>'normal');
	$attempt_to_close_card_button     ->configure(-state=>'disable');
	$soft_trigger_once_button         ->configure(-state=>'disable');
	$soft_trigger_N_times_button      ->configure(-state=>'disable');
	$set_event_number_button          ->configure(-state=>'disable');
	$set_start_and_end_windows_button ->configure(-state=>'disable');
	$global_reset_button              ->configure(-state=>'disable');
	$clear_scaler_counters_button     ->configure(-state=>'disable');
}

sub soft_trigger {
	fiber_readout_swigwrapper::send_soft_trigger_request_command_packet();
}

sub soft_trigger_once {
	soft_trigger();
}

sub soft_trigger_N_times {
	my $string = "logdir/card" . $card_id . ".channel";
	fiber_readout_swigwrapper::open_files_for_output_and_read_N_events($string, $N);
#	for (my $i=0; $i<$N; $i++) {
#		usleep(10000);
#		soft_trigger();
#	}
}

sub set_event_number {
	fiber_readout_swigwrapper::set_event_number($event_number);
}

sub set_start_and_end_windows {
	fiber_readout_swigwrapper::set_start_and_end_windows($start_window, $end_window);
}

sub global_reset {
	fiber_readout_swigwrapper::global_reset();
}

sub clear_scaler_counters {
	fiber_readout_swigwrapper::clear_scaler_counters();
}

#my $string = sprintf("\"%s\"\n", $fiber_readout::default_device_name);
#print $string;

sub setup_main_window {
	$window = new MainWindow(-title=>"iTOP electronics module / fiber readout", -height=>480, -width=>640);
	$window->bind('<Key-Escape>', \&quit);
#	my $default_color = "#d9d9d9";
	$card_id_entry                    = $window->Entry(-width=>5, -state=>"normal", -textvariable=>\$card_id);
	$attempt_to_open_card_button      = $window->Button(-text=>"open DSP_cPCI card #", -command=>\&setup_pci);
	$attempt_to_close_card_button     = $window->Button(-text=>"close card", -command=>\&close_pci, -state=>'disable');
	$attempt_to_open_card_button      ->grid(-row=>0, -column=>0);
	$card_id_entry                    ->grid(-row=>0, -column=>1);
	$attempt_to_close_card_button     ->grid(-row=>0, -column=>2);
	$soft_trigger_once_button         = $window->Button(-text=>"soft trigger once", -command=>\&soft_trigger_once, -state=>'disable');
	$soft_trigger_N_times_button      = $window->Button(-text=>"soft trigger N times", -command=>\&soft_trigger_N_times, -state=>'disable');
	$N_entry                          = $window->Entry(-width=>5, -state=>"normal", -textvariable=>\$N);
	$soft_trigger_once_button         ->grid(-row=>1, -column=>0);
	$N_entry                          ->grid(-row=>1, -column=>1);
	$soft_trigger_N_times_button      ->grid(-row=>1, -column=>2);
	$event_number_entry               = $window->Entry(-width=>5, -state=>"normal", -textvariable=>\$event_number);
	$set_event_number_button          = $window->Button(-text=>"set event number", -command=>\&set_event_number, -state=>'disable');
	$event_number_entry               ->grid(-row=>2, -column=>0);
	$set_event_number_button          ->grid(-row=>2, -column=>1);
	$start_window_entry               = $window->Entry(-width=>5, -state=>"normal", -textvariable=>\$start_window);
	$end_window_entry                 = $window->Entry(-width=>5, -state=>"normal", -textvariable=>\$end_window);
	$set_start_and_end_windows_button = $window->Button(-text=>"set start and end windows", -command=>\&set_start_and_end_windows, -state=>'disable');
	$start_window_entry               ->grid(-row=>3, -column=>0);
	$end_window_entry                 ->grid(-row=>3, -column=>1);
	$set_start_and_end_windows_button ->grid(-row=>3, -column=>2);
	$global_reset_button              = $window->Button(-text=>"request global reset", -command=>\&global_reset, -state=>'disable');
	$clear_scaler_counters_button     = $window->Button(-text=>"clear scaler counters", -command=>\&clear_scaler_counters, -state=>'disable');
	$global_reset_button              ->grid(-row=>4, -column=>0);
	$clear_scaler_counters_button     ->grid(-row=>4, -column=>1);

	# here are examples of doing things in Perl/Tk:
	#$filter_slide_frame  = $window->Frame(-borderwidth=>15, -background=>$filter_slide_frame_background_color);
	#$radiobutton_filter_label = $filter_slide_frame->Label(-text=>"filter slide:", -background=>$filter_slide_frame_background_color);
	#$radiobutton_filter_none  = $filter_slide_frame->Radiobutton(-text=>"none",  -value=>0, -variable=>\$displayed_filter_slide_macrostep_position, -command=>\&filter_slide_radiobutton_clicked, -background=>$filter_slide_frame_background_color);
	#$radiobutton_filter_label->grid(-row=>0, -column=>0);
	#$scale_delay_in_picoseconds->grid    (-row=>0, -column=>0, -columnspan=>3);
	#$entry_delay_in_picoseconds->bind('<Return>', \&predicate_new_desired_delay_in_picoseconds);
	#$entry_delay_in_picoseconds       = $delay_slide_frame_1->Entry(-width=>5, -state=>"normal", -textvariable=>\$displayed_delay_in_picoseconds, -background=>$delay_slide_frame_background_color);
	#my $frame_xy_slide_grid_get_out_of_way_button  = $frame_xy_slide_grid->Button(-text=>"save x position and get out of way of PMT",  -command=>\&save_position_and_move_x_slide_out_of_way, -background=>$frame_xy_slide_grid_background_color);
	#my $frame_xy_slide_grid_left_button  = $frame_xy_slide_grid->Button(-text=>"left",  -command=>[\&move_xy_slide, -1,  0], -background=>$frame_xy_slide_grid_background_color);
	#my $frame_xy_slide_grid_restore_position_button  = $frame_xy_slide_grid->Button(-text=>"restore x position",  -command=>\&restore_position_of_x_slide, -background=>$frame_xy_slide_grid_background_color);
	#my $frame_canvas = $frame_xy_slide_grid->Canvas(-width=>313, -height=>320);
	#my $image = $frame_canvas->Photo(-format=>"png", -file => "R5900.png", -width=>313, -height=>320);
	#$frame_canvas->create('image', 0, 0, '-anchor' => 'nw', '-image' => $image);
	#$frame_canvas->grid(-row=>0, -column=>0);
	#$frame_canvas->Tk::bind('<ButtonRelease-1>', \&grid_button_release);

}

sub quit {
	close_pci($card_id);
	exit(0);
}

setup_main_window();
MainLoop;

